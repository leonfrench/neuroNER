PACKAGE neuroner;

//UIMAFIT 

// NEURON
DECLARE Neuron, NeuronProperty;
"\\b((inter)?neurons?|cells?)\\b" -> Neuron;
//"\\b((inter)?neurons?)\\b" -> Neuron;

// ORIENTATION
DECLARE NeuronProperty Orientation;
"inverted|horizontal|descending" -> Orientation;

// MORPHOLOGY
DECLARE NeuronProperty Morphology;
WORDLIST morphology = 'morphology.txt';
Document{-> MARKFAST(Morphology, morphology)};

// SIZE
DECLARE NeuronProperty Size;
"large|medium|small|narrow|giant" -> Size;

// PROTEIN
DECLARE ProteinName;
DECLARE NeuronProperty Protein;
WORDLIST proteinNames = 'proteins.twl';
Document{-> MARKFAST(ProteinName, proteinNames)};
ProteinName{-> MARK(Protein, 1, 2)} ("-"? "positive");
ProteinName{-> MARK(Protein, 1, 2)} ("-"? "expressing|principal|containing|immuno(negative|positive)|positive");
ProteinName{-> MARK(Protein, 1, 2)}  ("expressing|principal|containing|immuno(negative|positive)|positive");
//ProteinName{-> MARK(Protein, 1, 2)} ("expressing");

// BRAINREGION
DECLARE NeuronProperty BrainRegion;
WORDLIST brainRegions = 'all_regions.twl';
Document{-> MARKFAST(BrainRegion, brainRegions)};

// NEUROTRANSMITTER 
DECLARE NeuronProperty Neurotransmitter;
"(gaba|GABA|glutamat|dopamin)ergic" -> Neurotransmitter;

// FUNCTION 
DECLARE NeuronProperty Function;
WORDLIST functions = 'functions.txt';
Document{-> MARKFAST(Function, functions)};

// LAYER
DECLARE NeuronProperty Layer;
"[Ll]ayer ([1-6]([/-][1-6])?|[iIvV]+([/-][iIvV]+)?)" -> Layer;
    
// ELECTROPYHSIOLOGY
DECLARE NeuronProperty Electrophysiology;
"(continu(ally|ous)?|delayed)? ?(fast|late|burst(ing)?|classical|delayed)[ -]((non-)?accomodating|spiking|firing|irregular|stuttering)" -> Electrophysiology;

// gather NeuronProperty occuring after and before Neuron
DECLARE NeuronWithProperties;
NeuronProperty+{-> MARK(NeuronWithProperties, 1, 2)} Neuron;
(NeuronProperty+ (COMMA | "and" | (COMMA "and")))* {-> MARK(NeuronWithProperties, 1, 3)} NeuronProperty+ Neuron;
// keep only longest NeuronWithProperties
NeuronWithProperties{PARTOFNEQ(NeuronWithProperties) -> DEL};
// TODO remove cells without NeuronProperty

// Log words preceding a NeuronWithProperties to see what is still missing
//DECLARE Sentence; PERIOD #{-> MARK(Sentence)} PERIOD;

//DECLARE Missing;
//(W){-> MARK(Missing, 1, 1)} NeuronWithProperties;
//(W W){-> MARK(Missing, 1, 1)} NeuronWithProperties;
//(W W W){-> MARK(Missing, 1, 1)} NeuronWithProperties;
//(W W W W){-> MARK(Missing, 1, 1)} NeuronWithProperties;
