PACKAGE neuroner;

// NEURON
// acts as a trigger
DECLARE Neuron, NeuronProperty;
"(?i)\\b((inter)?neurone?s?|cells?)\\b" -> Neuron;
//"\\b((inter)?neurons?)\\b" -> Neuron;

// DICTIONARY MATCHING
// we use a single compiled trie to match word lists (found in resources folder)
DECLARE NeuronProperty Developmental; // developmental stages
DECLARE NeuronProperty Species; 
DECLARE NeuronProperty Function;
DECLARE NeuronProperty Morphology;
DECLARE NeuronProperty BrainRegionProp; // so as not to be confused w/ other BrainRegion
DECLARE ProteinName; // is further aggregated below
DECLARE NeuronProperty NeurotransmitterProp;
WORDLIST generated = 'generated.mtwl';
Document{->TRIE(
"developmental.txt" = Developmental,
"functions.txt" = Function,
"morphology.txt" = Morphology,
"neurotransmitter.txt" = NeurotransmitterProp,
"proteins_ns_dan.txt" = ProteinName,
"proteins_obo_pro.txt" = ProteinName,
"regions_adverbs_al.txt" = BrainRegionProp,
"regions_adverbs_ic.txt" = BrainRegionProp,
"regions_lfrench.txt" = BrainRegionProp,
"regions.txt" = BrainRegionProp,
"species.txt" = Species,
generated, true, 4, false, 0, "")}; // case ignored if word length > 4; edit distance deactivated

// ORIENTATION
DECLARE NeuronProperty Orientation;
"(?i)inverted|horizontal|descending" -> Orientation;

// SIZE
DECLARE NeuronProperty Size;
"(?i)large|medium|small|narrow|giant" -> Size;

// PROTEIN
// aggregate protein names (as it was matched above) with a trigger 
DECLARE ProteinTrigger;
"(?i)expressing|principal|containing|immuno(nega|posi|reac)tive|positive" -> ProteinTrigger;
DECLARE NeuronProperty ProteinProp;
(ProteinName){-> MARK(ProteinProp, 1, 2)} ("-"? ProteinTrigger);

// LAYER
DECLARE NeuronProperty Layer;
"[Ll]ayers? ([1-6][AaBb]?([/-][1-6][AaBb]?)?|[iIvV]+([/-][iIvV]+)?)" -> Layer;
    
// ELECTROPYHSIOLOGY
DECLARE NeuronProperty Electrophysiology;
"(?i)((continu(ally|ous)?|delayed) )?((regular|fast|late|burst(ing)?|classical|delayed)[ -])?((non[- ]+)?accomm?odating|spiking|firing|irregular|stuttering)" -> Electrophysiology;



//////////////////////////////////////////////////////////

// gather NeuronProperty occurring before Neuron
DECLARE NeuronWithProperties;
NeuronProperty+{-> MARK(NeuronWithProperties, 1, 2)} Neuron;
(NeuronProperty+ (COMMA | "and" | (COMMA "and")))* {-> MARK(NeuronWithProperties, 1, 3)} NeuronProperty+ Neuron;
// keep only longest NeuronWithProperties
NeuronWithProperties{PARTOFNEQ(NeuronWithProperties) -> DEL};
// TODO remove cells without NeuronProperty

// Find up to 3 unmatched words preceding a NeuronWithProperties to see what is still missing
// DECLARE Sentence; PERIOD #{-> MARK(Sentence)} PERIOD;
DECLARE Missing, InBetweenMissing;

NeuronProperty (ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)}(NeuronWithProperties|Neuron);
NeuronProperty (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)}(NeuronWithProperties|Neuron);
NeuronProperty (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)}(NeuronWithProperties|Neuron);

